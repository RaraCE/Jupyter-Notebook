#Goals:
##Question 1 - Extracting Tesla Stock Data Using yfinance 
Reset the index, save, and display the first five rows of the tesla_data dataframe using the head function.
##Question 2 - Extracting Tesla Revenue Data Using Webscraping
Display the last five rows of the tesla_revenue dataframe using the tail function.
##Question 3 - Extracting GameStop Stock Data Using yfinance
Reset the index, save, and display the first five rows of the gme_data dataframe using the head function.
##Question 4 - Extracting GameStop Revenue Data Using Webscraping 
Display the last five rows of the gme_revenue dataframe using the tail function.
##Question 5 - Tesla Stock and Revenue Dashboard 
Use the make_graph function to graph the Tesla Stock Data, also provide a title for the graph.
##Question 6 - GameStop Stock and Revenue Dashboard
Use the make_graph function to graph the GameStop Stock Data, also provide a title for the graph.
##Question 7 - Sharing your Assignment Notebook

!pip install yfinance
!pip install matplotlib
!pip install pandas
!pip install bs4
!pip install nbformat
!pip install plotly

import yfinance as yf
import pandas as pd
import matplotlib as mp
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from IPython.display import display, HTML

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

#Extracting Tesla Stock Data Using yfinance
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")

tesla_data.reset_index(inplace=True)
tesla_data.head()

#Extracting Tesla Revenue Data Using Webscraping
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url)

soup = BeautifulSoup(html_data.content, "html.parser")

tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])

tables = soup.find_all("table")

#Look for the table that contains Tesla's quarterly revenue data
tesla_table = None
for table in tables:
    if "Tesla Quarterly Revenue" in table.text:
        tesla_table = table
        break

# Check if the table is found
if tesla_table is None:
    print("Tesla Quarterly Revenue Table not found!")
else:
    print("Tesla Quarterly Revenue Table found!")

# 5. Iterate Through Rows in the Table Body
if tesla_table:
    rows = tesla_table.find_all("tr")

    # 6. Extract Data from Columns and Append Data to the DataFrame
    for row in rows[1:]:  # Skipping the header row
        columns = row.find_all("td")
        if len(columns) > 1:
            # Extract Date and Revenue from the row
            date = columns[0].text.strip()
            revenue = columns[1].text.strip()

            # Convert revenue to a numeric value (remove commas and dollar sign)
            tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")

            # Create a temporary DataFrame for the current row
            temp_df = pd.DataFrame({"Date": [date], "Revenue": [revenue]})

            # Use pd.concat to append the data
            tesla_revenue = pd.concat([tesla_revenue, temp_df], ignore_index=True)

tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

tesla_revenue.tail()

#Extracting GameStop Stock Data Using yfinance
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")
gme_data.reset_index(inplace=True)
gme_data.head()

#Extracting GameStop Revenue Data Using Webscraping
url2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data2 = requests.get(url2)

soup = BeautifulSoup(html_data2.content, "html.parser")

gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
tables = soup.find_all("table")
gme_table = None
for table in tables:
    if "GameStop Quarterly Revenue" in table.text:
        gme_table = table
        break

# Check if the table is found
if gme_table is None:
    print("GME Quarterly Revenue Table not found!")
else:
    print("GME Quarterly Revenue Table found!")

# Iterate Through Rows in the Table Body
if gme_table:
    rows = gme_table.find_all("tr")

    # Extract Data from Columns and Append Data to the DataFrame
    for row in rows[1:]:  # Skipping the header row
        columns = row.find_all("td")
        if len(columns) > 1:
            # Extract Date and Revenue from the row
            date = columns[0].text.strip()
            revenue = columns[1].text.strip()

            # Remove dollar signs and commas, then convert to a float
            revenue = float(revenue.replace('$', '').replace(',', ''))

            # Create a temporary DataFrame for the current row
            temp_df = pd.DataFrame({"Date": [date], "Revenue": [revenue]})

            # Use pd.concat to append the data
            gme_revenue = pd.concat([gme_revenue, temp_df], ignore_index=True)

# Drop any rows with missing or empty values
gme_revenue.dropna(inplace=True)
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]

gme_revenue.tail()

#define make_graph function
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()
    from IPython.display import display, HTML
    fig_html = fig.to_html()
    display(HTML(fig_html))

#Tesla Stock and Revenue Dashboard
make_graph(tesla_data, tesla_revenue, stock="Tesla")

#GameStop Stock and Revenue Dashboard
make_graph(gme_data, gme_revenue, stock="GameStop")
